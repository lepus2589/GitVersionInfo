#[[
MIT License

CMake build script for GitVersionInfo module
Copyright (c) 2025 Tim Kaune

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
]]

#[[
This internal macro looks for the Git executable and checks, if the current
source directory is managed in a Git repository.

Usage:

_git_version_info_check()
]]
macro(_git_version_info_check)

cmake_path(HASH CMAKE_CURRENT_SOURCE_DIR _CURRENT_SOURCE_DIR_HASH)

block (SCOPE_FOR VARIABLES PROPAGATE "_BUILT_FROM_GIT_${_CURRENT_SOURCE_DIR_HASH}")

if (NOT GIT_EXECUTABLE)
    message(CHECK_START "Looking for git command")
    find_package(Git REQUIRED)
    message(CHECK_PASS "found")
endif ()

if (NOT DEFINED "_BUILT_FROM_GIT_${_CURRENT_SOURCE_DIR_HASH}")
    execute_process(
        COMMAND "${GIT_EXECUTABLE}" rev-parse --is-inside-work-tree
        WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
        RESULT_VARIABLE _GIT_REV_PARSE_RESULT
        OUTPUT_QUIET ERROR_QUIET
    )

    if (_GIT_REV_PARSE_RESULT EQUAL 0)
        set("_BUILT_FROM_GIT_${_CURRENT_SOURCE_DIR_HASH}" YES)
    else ()
        set("_BUILT_FROM_GIT_${_CURRENT_SOURCE_DIR_HASH}" NO)
    endif ()
endif ()

endblock ()

endmacro ()


#[[
This internal macro obtains the Git toplevel directory and calculates an
FNV-1a 64bit hash.

Usage:

_git_version_info_toplevel_hash()
]]
macro(_git_version_info_toplevel_hash)

block (SCOPE_FOR VARIABLES PROPAGATE "_GIT_TOPLEVEL_HASH_${_CURRENT_SOURCE_DIR_HASH}")

if ("${_BUILT_FROM_GIT_${_CURRENT_SOURCE_DIR_HASH}}" AND NOT DEFINED "_GIT_TOPLEVEL_HASH_${_CURRENT_SOURCE_DIR_HASH}")
    execute_process(
        COMMAND "${GIT_EXECUTABLE}" rev-parse --path-format=absolute --show-toplevel
        WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
        OUTPUT_VARIABLE _GIT_TOPLEVEL
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    cmake_path(HASH _GIT_TOPLEVEL "_GIT_TOPLEVEL_HASH_${_CURRENT_SOURCE_DIR_HASH}")
endif ()

endblock ()

endmacro ()


#[[
This macro creates a custom trigger target specific for this Git toplevel
directory, which triggers a rebuild whenever the HEAD commit or the dirty
state of the working directory changes. The user-provided target gains a
target-level dependency on the custom trigger target. All provided source
files in the directory of the user-provided target gain a file-level
dependency on the custom trigger target's byproduct. The user-provided target
can be a library, executable or custom target. The source files can be project
source files or source files generated by a custom command.

Usage:

git_version_info_add_dependant_source_files(
    TARGET <target>
    SOURCES <source file>...
)
]]
macro(git_version_info_add_dependant_source_files)

block (SCOPE_FOR VARIABLES)

_git_version_info_check()
_git_version_info_toplevel_hash()

cmake_parse_arguments(_GIT_VERSION "" "TARGET" "SOURCES" ${ARGN})
# _GIT_VERSION_TARGET and _GIT_VERSION_SOURCES are now available.

if ("${_BUILT_FROM_GIT_${_CURRENT_SOURCE_DIR_HASH}}")
    set(_GIT_TOPLEVEL_HASH "${_GIT_TOPLEVEL_HASH_${_CURRENT_SOURCE_DIR_HASH}}")
    set(_VERSION_INFO_FILE "${CMAKE_CURRENT_BINARY_DIR}/_git_version_info.txt")

    if (NOT TARGET "_GIT_VERSION_INFO_TRIGGER_${_GIT_TOPLEVEL_HASH}")
        set(_VERSION_INFO_TMP_FILE "${CMAKE_CURRENT_BINARY_DIR}/_git_version_info_tmp.txt")

        add_custom_target(
            "_GIT_VERSION_INFO_TRIGGER_${_GIT_TOPLEVEL_HASH}"
            COMMAND "${GIT_EXECUTABLE}" describe --all --long --always --dirty > "${_VERSION_INFO_TMP_FILE}"
            COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${_VERSION_INFO_TMP_FILE}" "${_VERSION_INFO_FILE}"
            COMMAND "${CMAKE_COMMAND}" -E rm "${_VERSION_INFO_TMP_FILE}"
            BYPRODUCTS "${_VERSION_INFO_FILE}"
            WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
            VERBATIM
        )
    endif ()

    add_dependencies(${_GIT_VERSION_TARGET} "_GIT_VERSION_INFO_TRIGGER_${_GIT_TOPLEVEL_HASH}")

    foreach(_GIT_VERSION_SOURCE IN LISTS _GIT_VERSION_SOURCES)
        get_source_file_property(
            _GIT_VERSION_SOURCE_GENERATED
            "${_GIT_VERSION_SOURCE}"
            TARGET_DIRECTORY ${_GIT_VERSION_TARGET}
            GENERATED
        )

        if (_GIT_VERSION_SOURCE_GENERATED)
            add_custom_command(OUTPUT "${_GIT_VERSION_SOURCE}" DEPENDS "${_VERSION_INFO_FILE}" APPEND)
        else ()
            set_source_files_properties(
                "${_GIT_VERSION_SOURCE}"
                TARGET_DIRECTORY ${_GIT_VERSION_TARGET}
                PROPERTIES
                OBJECT_DEPENDS
                "${_VERSION_INFO_FILE}"
            )
        endif ()
    endforeach()
endif ()

endblock ()

endmacro ()


#[[
This macro obtains the new git SHA1 hash for HEAD whenever the HEAD commit or
the dirty state of the working directory changes. It writes the SHA1 into a
user-provided preprocessor variable in a header file and force includes it for
all provided sources. The user-provided target can be a library, executable or
custom target. The source files can be project source files or source files
generated by a custom command. But they must be compiled.

TARGET: Name of the target that needs the SHA1 hash header file.
PREPROCESSOR_VAR: Name of the preprocessor variable to use for the SHA1 hash.
SOURCES: List of source files to compile with the SHA1 hash header file.

Usage:

git_version_info_add_compile_definitions(
    TARGET <target>
    PREPROCESSOR_VAR <preprocessor variable name>
    SOURCES <source file>...
)
]]
macro(git_version_info_add_compile_definitions)

block (SCOPE_FOR VARIABLES)

_git_version_info_check()
_git_version_info_toplevel_hash()

cmake_parse_arguments(_GIT_VERSION "" "TARGET;PREPROCESSOR_VAR" "SOURCES" ${ARGN})
# _GIT_VERSION_TARGET, _GIT_VERSION_PREPROCESSOR_VAR and _GIT_VERSION_SOURCES
# are now available.

if ("${_BUILT_FROM_GIT_${_CURRENT_SOURCE_DIR_HASH}}")
    set(_GIT_TOPLEVEL_HASH "${_GIT_TOPLEVEL_HASH_${_CURRENT_SOURCE_DIR_HASH}}")

    cmake_path(HASH _GIT_VERSION_PREPROCESSOR_VAR _GIT_VERSION_PREPROCESSOR_VAR_HASH)
    set(_GIT_VERSION_INFO_GENERATE_HEADER_TARGET "_GIT_VERSION_INFO_GENERATE_HEADER_${_GIT_TOPLEVEL_HASH}_${_GIT_VERSION_PREPROCESSOR_VAR_HASH}")

    set(_GIT_VERSION_INFO_HEADER_FILE "_git_version_info_head_sha1_${_GIT_VERSION_PREPROCESSOR_VAR_HASH}.h")
    set(_GIT_VERSION_INFO_HEADER_FILE_PATH "${CMAKE_CURRENT_BINARY_DIR}/${_GIT_VERSION_INFO_HEADER_FILE}")

    if (NOT TARGET "${_GIT_VERSION_INFO_GENERATE_HEADER_TARGET}")
        set(_GIT_VERSION_INFO_GENERATE_HEADER_SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/_git_version_info_generate_header_${_GIT_VERSION_PREPROCESSOR_VAR_HASH}.cmake")
        set(_GIT_VERSION_INFO_HEAD_SHA1_FILE "${CMAKE_CURRENT_BINARY_DIR}/_git_version_info_head_sha1_${_GIT_VERSION_PREPROCESSOR_VAR_HASH}.txt")

        file(
            CONFIGURE
            OUTPUT "${_GIT_VERSION_INFO_GENERATE_HEADER_SCRIPT}"
            CONTENT "\
file(STRINGS \"${_GIT_VERSION_INFO_HEAD_SHA1_FILE}\" _GIT_VERSION_INFO_HEAD_SHA1 LIMIT_COUNT 1)
file(CONFIGURE OUTPUT \"${_GIT_VERSION_INFO_HEADER_FILE_PATH}\" CONTENT \"#define ${_GIT_VERSION_PREPROCESSOR_VAR} \\\"\${_GIT_VERSION_INFO_HEAD_SHA1}\\\"\\n\")
"
            @ONLY
        )

        add_custom_command(
            OUTPUT "${_GIT_VERSION_INFO_HEADER_FILE_PATH}"
            DEPENDS "${_GIT_VERSION_INFO_GENERATE_HEADER_SCRIPT}"
            COMMAND "${GIT_EXECUTABLE}" rev-parse HEAD > "${_GIT_VERSION_INFO_HEAD_SHA1_FILE}"
            COMMAND "${CMAKE_COMMAND}" -P "${_GIT_VERSION_INFO_GENERATE_HEADER_SCRIPT}"
            COMMAND "${CMAKE_COMMAND}" -E rm "${_GIT_VERSION_INFO_HEAD_SHA1_FILE}"
            VERBATIM
        )

        add_custom_target(
            "${_GIT_VERSION_INFO_GENERATE_HEADER_TARGET}"
            DEPENDS "${_GIT_VERSION_INFO_HEADER_FILE_PATH}"
        )

        git_version_info_add_dependant_source_files(
            TARGET "${_GIT_VERSION_INFO_GENERATE_HEADER_TARGET}"
            SOURCES "${_GIT_VERSION_INFO_HEADER_FILE_PATH}"
        )
    endif ()

    add_dependencies("${_GIT_VERSION_TARGET}" "${_GIT_VERSION_INFO_GENERATE_HEADER_TARGET}")

    set_source_files_properties(
        ${_GIT_VERSION_SOURCES}
        TARGET_DIRECTORY ${_GIT_VERSION_TARGET}
        PROPERTIES
        COMPILE_OPTIONS
        "-include;${_GIT_VERSION_INFO_HEADER_FILE}"
        INCLUDE_DIRECTORIES
        "${CMAKE_CURRENT_BINARY_DIR}"
    )
endif ()

endblock ()

endmacro()
